// Code generated by protoc-gen-go.
// source: nrperpc.proto
// DO NOT EDIT!

/*
Package nrperpc is a generated protocol buffer package.

It is generated from these files:
	nrperpc.proto

It has these top-level messages:
	NrpeRequest
	NrpeReply
*/
package nrperpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The requested NRPE check
type NrpeRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *NrpeRequest) Reset()                    { *m = NrpeRequest{} }
func (m *NrpeRequest) String() string            { return proto.CompactTextString(m) }
func (*NrpeRequest) ProtoMessage()               {}
func (*NrpeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NrpeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the status
type NrpeReply struct {
	StatusCode int32  `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	StatusLine string `protobuf:"bytes,2,opt,name=StatusLine" json:"StatusLine,omitempty"`
}

func (m *NrpeReply) Reset()                    { *m = NrpeReply{} }
func (m *NrpeReply) String() string            { return proto.CompactTextString(m) }
func (*NrpeReply) ProtoMessage()               {}
func (*NrpeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NrpeReply) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *NrpeReply) GetStatusLine() string {
	if m != nil {
		return m.StatusLine
	}
	return ""
}

func init() {
	proto.RegisterType((*NrpeRequest)(nil), "nrperpc.NrpeRequest")
	proto.RegisterType((*NrpeReply)(nil), "nrperpc.NrpeReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Check service

type CheckClient interface {
	// Sends a greeting
	NrpeCheck(ctx context.Context, in *NrpeRequest, opts ...grpc.CallOption) (*NrpeReply, error)
}

type checkClient struct {
	cc *grpc.ClientConn
}

func NewCheckClient(cc *grpc.ClientConn) CheckClient {
	return &checkClient{cc}
}

func (c *checkClient) NrpeCheck(ctx context.Context, in *NrpeRequest, opts ...grpc.CallOption) (*NrpeReply, error) {
	out := new(NrpeReply)
	err := grpc.Invoke(ctx, "/nrperpc.Check/NrpeCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Check service

type CheckServer interface {
	// Sends a greeting
	NrpeCheck(context.Context, *NrpeRequest) (*NrpeReply, error)
}

func RegisterCheckServer(s *grpc.Server, srv CheckServer) {
	s.RegisterService(&_Check_serviceDesc, srv)
}

func _Check_NrpeCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NrpeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServer).NrpeCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nrperpc.Check/NrpeCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServer).NrpeCheck(ctx, req.(*NrpeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Check_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nrperpc.Check",
	HandlerType: (*CheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NrpeCheck",
			Handler:    _Check_NrpeCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nrperpc.proto",
}

func init() { proto.RegisterFile("nrperpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x2b, 0x2a, 0x48,
	0x2d, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x14, 0xb9,
	0xb8, 0xfd, 0x8a, 0x0a, 0x52, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x84, 0xb8, 0x58,
	0xf2, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x25, 0x6f, 0x2e,
	0x4e, 0x88, 0x92, 0x82, 0x9c, 0x4a, 0x21, 0x39, 0x2e, 0xae, 0xe0, 0x92, 0xc4, 0x92, 0xd2, 0x62,
	0xe7, 0xfc, 0x14, 0x88, 0x32, 0xd6, 0x20, 0x24, 0x11, 0x84, 0xbc, 0x4f, 0x66, 0x5e, 0xaa, 0x04,
	0x13, 0xd8, 0x18, 0x24, 0x11, 0x23, 0x07, 0x2e, 0x56, 0xe7, 0x8c, 0xd4, 0xe4, 0x6c, 0x21, 0x73,
	0x88, 0xa9, 0x10, 0x8e, 0x88, 0x1e, 0xcc, 0x79, 0x48, 0x8e, 0x91, 0x12, 0x42, 0x13, 0x2d, 0xc8,
	0xa9, 0x54, 0x62, 0x70, 0x92, 0xe6, 0xe2, 0xc9, 0xcc, 0xd7, 0x4b, 0x07, 0x09, 0x83, 0xa4, 0x9d,
	0xc0, 0xc6, 0x04, 0x80, 0x7c, 0x15, 0xc0, 0x98, 0xc4, 0x06, 0xf6, 0x9e, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0x6f, 0x2d, 0xeb, 0xe4, 0xef, 0x00, 0x00, 0x00,
}
